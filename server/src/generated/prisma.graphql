# source: https://us1.prisma.sh/alexandra-6f757c/next-store-app/dev
# timestamp: Thu Dec 06 2018 10:44:34 GMT-0800 (Pacific Standard Time)

type AggregateImage {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductVariant {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Image implements Node {
  id: ID!
  cloudinary_id: String!
  name: String!
  height: Int!
  width: Int!
  transformation: String!
  image_url: String!
  large_image_url: String!
  user: User!
  product: Product
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  cloudinary_id: String!
  name: String!
  height: Int!
  width: Int!
  transformation: String!
  image_url: String!
  large_image_url: String!
  user: UserCreateOneInput!
  product: ProductCreateOneWithoutImageInput
  productVariants: ProductVariantCreateManyInput
}

input ImageCreateOneWithoutProductInput {
  create: ImageCreateWithoutProductInput
  connect: ImageWhereUniqueInput
}

input ImageCreateWithoutProductInput {
  cloudinary_id: String!
  name: String!
  height: Int!
  width: Int!
  transformation: String!
  image_url: String!
  large_image_url: String!
  user: UserCreateOneInput!
  productVariants: ProductVariantCreateManyInput
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  cloudinary_id_ASC
  cloudinary_id_DESC
  name_ASC
  name_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  transformation_ASC
  transformation_DESC
  image_url_ASC
  image_url_DESC
  large_image_url_ASC
  large_image_url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImagePreviousValues {
  id: ID!
  cloudinary_id: String!
  name: String!
  height: Int!
  width: Int!
  transformation: String!
  image_url: String!
  large_image_url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateInput {
  cloudinary_id: String
  name: String
  height: Int
  width: Int
  transformation: String
  image_url: String
  large_image_url: String
  user: UserUpdateOneRequiredInput
  product: ProductUpdateOneWithoutImageInput
  productVariants: ProductVariantUpdateManyInput
}

input ImageUpdateManyMutationInput {
  cloudinary_id: String
  name: String
  height: Int
  width: Int
  transformation: String
  image_url: String
  large_image_url: String
}

input ImageUpdateOneRequiredWithoutProductInput {
  create: ImageCreateWithoutProductInput
  connect: ImageWhereUniqueInput
  update: ImageUpdateWithoutProductDataInput
  upsert: ImageUpsertWithoutProductInput
}

input ImageUpdateWithoutProductDataInput {
  cloudinary_id: String
  name: String
  height: Int
  width: Int
  transformation: String
  image_url: String
  large_image_url: String
  user: UserUpdateOneRequiredInput
  productVariants: ProductVariantUpdateManyInput
}

input ImageUpsertWithoutProductInput {
  update: ImageUpdateWithoutProductDataInput!
  create: ImageCreateWithoutProductInput!
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cloudinary_id: String

  """All values that are not equal to given value."""
  cloudinary_id_not: String

  """All values that are contained in given list."""
  cloudinary_id_in: [String!]

  """All values that are not contained in given list."""
  cloudinary_id_not_in: [String!]

  """All values less than the given value."""
  cloudinary_id_lt: String

  """All values less than or equal the given value."""
  cloudinary_id_lte: String

  """All values greater than the given value."""
  cloudinary_id_gt: String

  """All values greater than or equal the given value."""
  cloudinary_id_gte: String

  """All values containing the given string."""
  cloudinary_id_contains: String

  """All values not containing the given string."""
  cloudinary_id_not_contains: String

  """All values starting with the given string."""
  cloudinary_id_starts_with: String

  """All values not starting with the given string."""
  cloudinary_id_not_starts_with: String

  """All values ending with the given string."""
  cloudinary_id_ends_with: String

  """All values not ending with the given string."""
  cloudinary_id_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  width: Int

  """All values that are not equal to given value."""
  width_not: Int

  """All values that are contained in given list."""
  width_in: [Int!]

  """All values that are not contained in given list."""
  width_not_in: [Int!]

  """All values less than the given value."""
  width_lt: Int

  """All values less than or equal the given value."""
  width_lte: Int

  """All values greater than the given value."""
  width_gt: Int

  """All values greater than or equal the given value."""
  width_gte: Int
  transformation: String

  """All values that are not equal to given value."""
  transformation_not: String

  """All values that are contained in given list."""
  transformation_in: [String!]

  """All values that are not contained in given list."""
  transformation_not_in: [String!]

  """All values less than the given value."""
  transformation_lt: String

  """All values less than or equal the given value."""
  transformation_lte: String

  """All values greater than the given value."""
  transformation_gt: String

  """All values greater than or equal the given value."""
  transformation_gte: String

  """All values containing the given string."""
  transformation_contains: String

  """All values not containing the given string."""
  transformation_not_contains: String

  """All values starting with the given string."""
  transformation_starts_with: String

  """All values not starting with the given string."""
  transformation_not_starts_with: String

  """All values ending with the given string."""
  transformation_ends_with: String

  """All values not ending with the given string."""
  transformation_not_ends_with: String
  image_url: String

  """All values that are not equal to given value."""
  image_url_not: String

  """All values that are contained in given list."""
  image_url_in: [String!]

  """All values that are not contained in given list."""
  image_url_not_in: [String!]

  """All values less than the given value."""
  image_url_lt: String

  """All values less than or equal the given value."""
  image_url_lte: String

  """All values greater than the given value."""
  image_url_gt: String

  """All values greater than or equal the given value."""
  image_url_gte: String

  """All values containing the given string."""
  image_url_contains: String

  """All values not containing the given string."""
  image_url_not_contains: String

  """All values starting with the given string."""
  image_url_starts_with: String

  """All values not starting with the given string."""
  image_url_not_starts_with: String

  """All values ending with the given string."""
  image_url_ends_with: String

  """All values not ending with the given string."""
  image_url_not_ends_with: String
  large_image_url: String

  """All values that are not equal to given value."""
  large_image_url_not: String

  """All values that are contained in given list."""
  large_image_url_in: [String!]

  """All values that are not contained in given list."""
  large_image_url_not_in: [String!]

  """All values less than the given value."""
  large_image_url_lt: String

  """All values less than or equal the given value."""
  large_image_url_lte: String

  """All values greater than the given value."""
  large_image_url_gt: String

  """All values greater than or equal the given value."""
  large_image_url_gte: String

  """All values containing the given string."""
  large_image_url_contains: String

  """All values not containing the given string."""
  large_image_url_not_contains: String

  """All values starting with the given string."""
  large_image_url_starts_with: String

  """All values not starting with the given string."""
  large_image_url_not_starts_with: String

  """All values ending with the given string."""
  large_image_url_ends_with: String

  """All values not ending with the given string."""
  large_image_url_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  product: ProductWhereInput
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
}

input ImageWhereUniqueInput {
  id: ID
  cloudinary_id: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createImage(data: ImageCreateInput!): Image!
  createProduct(data: ProductCreateInput!): Product!
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant!
  createUser(data: UserCreateInput!): User!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateProductVariant(data: ProductVariantUpdateInput!, where: ProductVariantWhereUniqueInput!): ProductVariant
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteUser(where: UserWhereUniqueInput!): User
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertProductVariant(where: ProductVariantWhereUniqueInput!, create: ProductVariantCreateInput!, update: ProductVariantUpdateInput!): ProductVariant!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyProductVariants(data: ProductVariantUpdateManyMutationInput!, where: ProductVariantWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product implements Node {
  id: ID!
  department: String!
  title: String!
  description: String!
  online: Boolean!
  category: String
  brand: String
  user: User!
  image: Image!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  department: String!
  title: String!
  description: String!
  online: Boolean!
  category: String
  brand: String
  user: UserCreateOneInput!
  image: ImageCreateOneWithoutProductInput!
  productVariants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateOneWithoutImageInput {
  create: ProductCreateWithoutImageInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutImageInput {
  department: String!
  title: String!
  description: String!
  online: Boolean!
  category: String
  brand: String
  user: UserCreateOneInput!
  productVariants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutProductVariantsInput {
  department: String!
  title: String!
  description: String!
  online: Boolean!
  category: String
  brand: String
  user: UserCreateOneInput!
  image: ImageCreateOneWithoutProductInput!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  department_ASC
  department_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  online_ASC
  online_DESC
  category_ASC
  category_DESC
  brand_ASC
  brand_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  department: String!
  title: String!
  description: String!
  online: Boolean!
  category: String
  brand: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  department: String
  title: String
  description: String
  online: Boolean
  category: String
  brand: String
  user: UserUpdateOneRequiredInput
  image: ImageUpdateOneRequiredWithoutProductInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  department: String
  title: String
  description: String
  online: Boolean
  category: String
  brand: String
}

input ProductUpdateOneRequiredWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutProductVariantsDataInput
  upsert: ProductUpsertWithoutProductVariantsInput
}

input ProductUpdateOneWithoutImageInput {
  create: ProductCreateWithoutImageInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutImageDataInput
  upsert: ProductUpsertWithoutImageInput
}

input ProductUpdateWithoutImageDataInput {
  department: String
  title: String
  description: String
  online: Boolean
  category: String
  brand: String
  user: UserUpdateOneRequiredInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutProductVariantsDataInput {
  department: String
  title: String
  description: String
  online: Boolean
  category: String
  brand: String
  user: UserUpdateOneRequiredInput
  image: ImageUpdateOneRequiredWithoutProductInput
}

input ProductUpsertWithoutImageInput {
  update: ProductUpdateWithoutImageDataInput!
  create: ProductCreateWithoutImageInput!
}

input ProductUpsertWithoutProductVariantsInput {
  update: ProductUpdateWithoutProductVariantsDataInput!
  create: ProductCreateWithoutProductVariantsInput!
}

type ProductVariant implements Node {
  id: ID!
  price: Float!
  quantity: Int!
  availability: String
  color: String
  size: String
  sale: Boolean!
  salePrice: Float!
  product: Product!
}

"""A connection to a list of items."""
type ProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductVariantEdge]!
  aggregate: AggregateProductVariant!
}

input ProductVariantCreateInput {
  price: Float!
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
  product: ProductCreateOneWithoutProductVariantsInput!
}

input ProductVariantCreateManyInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateWithoutProductInput {
  price: Float!
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
}

"""An edge in a connection."""
type ProductVariantEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  availability_ASC
  availability_DESC
  color_ASC
  color_DESC
  size_ASC
  size_DESC
  sale_ASC
  sale_DESC
  salePrice_ASC
  salePrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  price: Float!
  quantity: Int!
  availability: String
  color: String
  size: String
  sale: Boolean!
  salePrice: Float!
}

input ProductVariantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  availability: String

  """All values that are not equal to given value."""
  availability_not: String

  """All values that are contained in given list."""
  availability_in: [String!]

  """All values that are not contained in given list."""
  availability_not_in: [String!]

  """All values less than the given value."""
  availability_lt: String

  """All values less than or equal the given value."""
  availability_lte: String

  """All values greater than the given value."""
  availability_gt: String

  """All values greater than or equal the given value."""
  availability_gte: String

  """All values containing the given string."""
  availability_contains: String

  """All values not containing the given string."""
  availability_not_contains: String

  """All values starting with the given string."""
  availability_starts_with: String

  """All values not starting with the given string."""
  availability_not_starts_with: String

  """All values ending with the given string."""
  availability_ends_with: String

  """All values not ending with the given string."""
  availability_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  sale: Boolean

  """All values that are not equal to given value."""
  sale_not: Boolean
  salePrice: Float

  """All values that are not equal to given value."""
  salePrice_not: Float

  """All values that are contained in given list."""
  salePrice_in: [Float!]

  """All values that are not contained in given list."""
  salePrice_not_in: [Float!]

  """All values less than the given value."""
  salePrice_lt: Float

  """All values less than or equal the given value."""
  salePrice_lte: Float

  """All values greater than the given value."""
  salePrice_gt: Float

  """All values greater than or equal the given value."""
  salePrice_gte: Float
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
}

input ProductVariantUpdateDataInput {
  price: Float
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
  product: ProductUpdateOneRequiredWithoutProductVariantsInput
}

input ProductVariantUpdateInput {
  price: Float
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
  product: ProductUpdateOneRequiredWithoutProductVariantsInput
}

input ProductVariantUpdateManyDataInput {
  price: Float
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
}

input ProductVariantUpdateManyInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueNestedInput!]
}

input ProductVariantUpdateManyMutationInput {
  price: Float
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
}

input ProductVariantUpdateWithoutProductDataInput {
  price: Float
  quantity: Int
  availability: String
  color: String
  size: String
  sale: Boolean
  salePrice: Float
}

input ProductVariantUpdateWithWhereUniqueNestedInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateDataInput!
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertWithWhereUniqueNestedInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

input ProductVariantWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  availability: String

  """All values that are not equal to given value."""
  availability_not: String

  """All values that are contained in given list."""
  availability_in: [String!]

  """All values that are not contained in given list."""
  availability_not_in: [String!]

  """All values less than the given value."""
  availability_lt: String

  """All values less than or equal the given value."""
  availability_lte: String

  """All values greater than the given value."""
  availability_gt: String

  """All values greater than or equal the given value."""
  availability_gte: String

  """All values containing the given string."""
  availability_contains: String

  """All values not containing the given string."""
  availability_not_contains: String

  """All values starting with the given string."""
  availability_starts_with: String

  """All values not starting with the given string."""
  availability_not_starts_with: String

  """All values ending with the given string."""
  availability_ends_with: String

  """All values not ending with the given string."""
  availability_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  sale: Boolean

  """All values that are not equal to given value."""
  sale_not: Boolean
  salePrice: Float

  """All values that are not equal to given value."""
  salePrice_not: Float

  """All values that are contained in given list."""
  salePrice_in: [Float!]

  """All values that are not contained in given list."""
  salePrice_not_in: [Float!]

  """All values less than the given value."""
  salePrice_lt: Float

  """All values less than or equal the given value."""
  salePrice_lte: Float

  """All values greater than the given value."""
  salePrice_gt: Float

  """All values greater than or equal the given value."""
  salePrice_gte: Float
  product: ProductWhereInput
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  department: String

  """All values that are not equal to given value."""
  department_not: String

  """All values that are contained in given list."""
  department_in: [String!]

  """All values that are not contained in given list."""
  department_not_in: [String!]

  """All values less than the given value."""
  department_lt: String

  """All values less than or equal the given value."""
  department_lte: String

  """All values greater than the given value."""
  department_gt: String

  """All values greater than or equal the given value."""
  department_gte: String

  """All values containing the given string."""
  department_contains: String

  """All values not containing the given string."""
  department_not_contains: String

  """All values starting with the given string."""
  department_starts_with: String

  """All values not starting with the given string."""
  department_not_starts_with: String

  """All values ending with the given string."""
  department_ends_with: String

  """All values not ending with the given string."""
  department_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  online: Boolean

  """All values that are not equal to given value."""
  online_not: Boolean
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  brand: String

  """All values that are not equal to given value."""
  brand_not: String

  """All values that are contained in given list."""
  brand_in: [String!]

  """All values that are not contained in given list."""
  brand_not_in: [String!]

  """All values less than the given value."""
  brand_lt: String

  """All values less than or equal the given value."""
  brand_lte: String

  """All values greater than the given value."""
  brand_gt: String

  """All values greater than or equal the given value."""
  brand_gte: String

  """All values containing the given string."""
  brand_contains: String

  """All values not containing the given string."""
  brand_not_contains: String

  """All values starting with the given string."""
  brand_starts_with: String

  """All values not starting with the given string."""
  brand_not_starts_with: String

  """All values ending with the given string."""
  brand_ends_with: String

  """All values not ending with the given string."""
  brand_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  image: ImageWhereInput
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  image(where: ImageWhereUniqueInput!): Image
  product(where: ProductWhereUniqueInput!): Product
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  user(where: UserWhereUniqueInput!): User
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productVariantsConnection(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productVariant(where: ProductVariantSubscriptionWhereInput): ProductVariantSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
