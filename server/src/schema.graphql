# import * from './generated/prisma.graphql'

type Query {
  me: User
  users: [User!]!
  image(where: ImageWhereInput): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, first: Int): [Image]!
  product(where: ProductWhereInput): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, first: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, first: Int): ProductConnection!
  variant(where: VariantWhereUniqueInput!): Variant
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, first: Int): [Variant]!
  order(where: OrderWhereInput): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, buyerId: ID): [Order]!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, sellerId: ID): [OrderItem]!
}

type Mutation {
  createUser(name: String!, email: String!, password: String!): User!
  signin(email: String!, password: String!): User!
  signout: Message
  requestPasswordReset(email: String!): Message
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  createImage(cloudinary_id: String!, name: String!, height: Int!, width: Int!, transformation: String!, image_url: String!, large_image_url: String!): Image!
  deleteImage(id: ID!): Image
  createProduct(department: String!, title: String!, description: String!, category: String, brand: String, online: Boolean!, imageId: String!): Product!
  updateProduct(id: ID!, department: String!, title: String!, description: String!, category: String, brand: String, online: Boolean!, imageId: String!): Product!
  deleteProduct(id: ID!): Product
  createProductVariant(color: String!, size: String!, quantity: Int!, price: Float!, sale: Boolean!, salePrice: Float, productId: String!, imageId: String!): Variant!
  updateProductVariant(id: ID!, color: String!, size: String!, quantity: Int, price: Float, sale: Boolean, salePrice: Float, imageId: String): Variant!
  deleteProductVariant(id: ID!): Variant
  addToCart(id: ID!): CartItem
  updateCartItem(id: ID!, quantity: Int!): CartItem
  removeFromCart(id: ID!): CartItem
  createOrder(token: String!): Order!
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  cart: [CartItem]!
}

type Message {
  success: Boolean
  failure: Boolean
  message: String!
}
